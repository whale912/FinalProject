# 답변형 게시판 처리.
1. 주요 기능.
	1) 게시판 리스트
		- 작성자와 제목으로 검색
		- 답변글 계층형으로 들여쓰기 처리..
		- 한 페이지 당, 보이는 건수 선택 페이징 처리.
		- 오늘 등록한 글 (new) 표기.
	2) 등록 화면
		- 작성자, 제목, 내용, 첨부파일을 통한 
			파일업로드와 함께 등록 처리.
	3) 상세 화면
		- 수정, 삭제 기능 처리
		- 답글 등록 처리.
		- 첨부된 파일 다운로드 처리.
2. 개발 순서
	1) Database 설계 및 sql 작성.
		- board(게시판메인테이블), fileinfo(파일업로드정보테이블)
		- 페이징 처리 sql로 해당 페이지의 시작번호, 마지막번호를 입력하여
			처리하는 구문이 필요하다.
	2) Vo 객체 생성
		- 조회하는 VO (검색과 페이징 처리 관련)
		- list의 단위 객체 VO
	3) 메인화면 list 처리
		- 리스트할 기본 sql 작성.
		- Dao interface 선언과 메서드 선언.
		- 공통(mybatis) xml 설정과 사용.
		    VO 등록, XXXMapper.xml 등록
		- boardMapper.xml 생성, 선언
			sql 작성..
	4) service단 구현
		- dao 호출
	5) controller단 구현
		- service 호출과 model 데이터 mapping
		- 화면단 호출.
	6) 기본 조회 화면 list
	
	7) 등록화면과 처리
	
	
	8) 상세화면과 수정 삭제 처리
		
	
	9) 답글작성 처리.
	
3. 상세 화면 처리.
	1) 데이터 처리.
		sql : select * from reboard
		      where no = ##
	2) Dao interface 선언.
		public Board getBoard(int no);
	3) boardMapper.xml
	    <select id="getBoard"  resultType="board" 
	    	parameterType="int">
	       select * from reboard
		      where no = #{no}
	4) service에서 dao호출
	5) controller에서 service호출.
		@RequestMapping(params="method=detail")
		public String detail(@RequestParam("no") int no,
							 Model d){
		    d.addAttribute("board", service.getBoard(no));
		    return "화면단 호출."
		}	      	
	6) view .jsp
	    <input type="text" name="no" value="${board.no}"
	    <input type="text" name="title" value="${board.title}"
	    <input type="text" name="writer" value="${board.writer}"
	7) view. 화면 jsp에서..
		<tr onclick="go(${board.no})" 
		function go(no){
			$(location).attr("href",
				"${path}/board.do?method=detail&no="+no);
		}   
	    
5. 파일 업로드와 다운로드 처리..
	1) 설정(lib)
		업로드할 파일의 위치를 설정(properties파일에서 설정)
		1. tomcat에서 기본 설정한 위치
		2. WebContent 밑에 특정한 위치		
	2) 컨테이너에서 파일 업로드 bean으로 등록 처리
	3) jsp 화면에서
		<input type="file" name="report" 
		<form enctype="multipart/form-data"
	4) VO
		Board 에서
			MultipartFile report;  / MultipartFile[] report; 
			// 네트웤상 stream으로 파일 전송하는 객체
	5) service 
		- 파일명 .report.getOriginalFilename()으로 가져온다
		- File 객체 생성
		- MultipartFile객체를 특정한 위치에 File객체로 변환하여 저장  .tranferTo(파일객체)
			eclipse에서 내장 tomcat으로 설치되기 때문에 임시위치가 지정
			임시위치에서 실제 Webcontent위치에 특정위치로 변경처리 ==> Files.copy
		- 파일명을 DB에 저장 - 글번호와 mapping하여
	6) dao를 통해서	
		 - 파일 업로드 정보를 입력하게끔 처리
	7) 상세화면에서 list 다운로드할 파일 list할 수 있게끔
		- dao만들어서 화면 처리
		
	8) 다운로드 bean 등록
		요청 ==> controller에서 파일호출 ==> Viewer에 파일로 호출(model)
		
		- 다운로드 Viewer bean생성
		- 다운로드 controller 생성
		- upload한 파일 클릭시, 다운로드 controller 호출처리
		
6. 답글 처리
	1) 상세화면에서 현재 글에 대한 답글을 등록하게 처리하는 것을 말한다
	2) 기본 데이터 구조
		원글의 no, 답글에서 refno(상위글번호)로 등록이 된다
		제목 : RE:원글의 제목 - default로 설정
		내용 : 
			하단에 원글의 내용 표기
			
			
			
			==== 상위글 내용 ====
			ㄻㄴㄹㅇ
			ㅁㄴㄹㄴㅁㄹㅇㅁㄴㄹ
	3) 위 내용이 변경된 등록글에서 등록 처리하게 하면 된다
		- 등록글에서 위의 내용을 그대로 받을 수 있게 model 데이터로 처리하여 해당 기본형식으로 설정
	
7. 계층형 sql
	1. start with 컬럼명=조건데이터 : 계층구조의 최상위 조건을 나타낸다
	2. connect by prior 하위 = 상위 : 상하위 컬럼을 연결시키는 조건 처리
	3. order siblings by 컬럼명 desc/asc : 형제 관계의 정렬우선 순위
8. paging 처리는 
	지정된 한번에 보여줄 데이터건수와 현재 클릭한 페이지번호에 따라서 
	보여주는 데이터 list를 처리하면 된다
	아래와 같이 시작번호와 마지막 번호를 DB처리에 넘겨주면 된다
	1)
		SELECT * 
		FROM (
			select rownum cnt,b.* 
			from reboard b
			where 1=1
			START WITH refno = 0
			CONNECT BY PRIOR NO = refno
			ORDER siblings BY NO DESC)
		WHERE cnt BETWEEN 1 AND 5;		
	2) 페이징 처리 순서
		- 사용하게 될 DB sql 확인
		- DB에 매개값으로 들어갈 VO 처리
			- 페이징 처리를 위하여 필요한 속성 지정
			총데이터 건수    17
			페이지 크기        5
			페이지 수 	총건수/페이지크기
			현재 클릭한 페이지 번호   1 2 3 4 
			총 페이지 번호    4
			시작번호          	2클릭시   6~10
			마지막번호		
			
		- 필요로 하는 화면 구성
		총건수:@@		페이징당 건수[3/5/10/.../]
			...
			...
			...
			
		    [1][2][3][4][5] > 블럭당 보여줄 블럭의 크기
		  < [6][7][8][9][10] > 블럭의 시작 페이지번호, 마지막번호
		  < [11][12]   --- 페이지수
		    
		- 화면에서 선택한 정보에 따라서 페이지의 시작번호와 마지막번호를 도출하여 데이터베이스에 전달 처리
			(service단 처리)	
			
9. 스프링의 modelattribute와 화면단 스프링 form 태그
	1) 스프링은 모델명과, 스프링 form태그를 연동하여 여러가지 기능을 처리하고 있다
	2) 환경설정
		- controller에서는 model, modelattribute로 이름을 정해서 선언 처리
		- view
			spring이 지원하는 tag lib 선언
			taglib prefix="form" http://www.springframework.org/tags/form
			form:form
				1) 모델 단위와 연결할 form의 속성값 commandName="모델명"
				2) form:input path="모델속성" ==> id, name 자동으로 생성
				3) value를 할당하지 않더라도 자동으로 매핑처리된다	
		
10. 페이지 block 처리
	1) vo 속성 설정 : blockSize(한번에 보일 block의 크기)
		startBlock : 시작 block번호, 
		endBlock : 마지막 block번호
	2) 블럭 시작번호와 마지막번호를 저장처리
		- service단 로직 처리
		
	3) 화면단 구현	
		  1  2  3  4  5  next
	prev  6  7  8  9  10 next
	prev  11 12 13
	4) next와 previous를 클릭할 시,
		block의 변경 처리	
		next를 클릭시, 현재 블럭의 마지막번호+1
			을 현재페이지번호로 넘겨주면 된다
		prev를 클릭시, 현재 블럭의 시작번호 -1
			을 현재페이지번호로 넘겨주면 된다
			
11. 답글에 대한 계층 level만큼 간격 처리하기..	
	
	
	
	
	
	
		
		
		
		
		