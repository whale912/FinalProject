package project06.mvc.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.HashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import project06.mvc.repository.JinhyeokRep;
import project06.mvc.vo.Board;
import project06.mvc.vo.Issue;
import project06.mvc.vo.JsonBoard;
import project06.mvc.vo.Project;
import project06.mvc.vo.Reply;





@Service
public class JinhyeokService {
	@Autowired(required=false)
	private JinhyeokRep dao;
	
	public ArrayList<Board> list(){
		
		return dao.list();
	}

	
	
	public ArrayList<Project> prolist(String empno){
		return dao.prolist(empno);
	}
	public ArrayList<Project> prolistall(){
		return dao.prolistall();
		
	}
	
	public Board getBoard(int pjboardno) {
		dao.uptViews(pjboardno);
		Board d = dao.getBoard(pjboardno);	
		System.out.println("작성자:"+d.getName());
		System.out.println("파일의 갯수:"+dao.fnames(pjboardno).size());
		d.setFilenames(dao.fnames(pjboardno));
		
		return d;
	}
	public ArrayList<JsonBoard> jsonblist(int projectno){
		
		return dao.jsonblist(projectno);
	}
	public ArrayList<Reply> replyjson(int pjreplyno){
		
		return dao.replyjson(pjreplyno);
	}
	
	public ArrayList<Board> list(Board sch){
		// 1. 데이터 총건수
		sch.setCount(dao.totCnt(sch));
		// 2. 화면에 한번에 보여줄 데이터 건수 초기값 5
		//	  다음 부터는  선택된 페이지 데이터 건수에 의해서 처리..0
		if(sch.getPageSize()==0) {
			sch.setPageSize(5);
			
		}
		
		// 3. 총페이지 수 : 총건수/한번에보여줄데이터
		//                  17/5  ==> 4
		//                  20/5  ==> 4
		//                  21/5  ==> 5
		// 총건수/페이지크기를실수로처리 나머지가 있게 한 후,
		// 올림 처리..
		//int totPage = (int)(Math.ceil(sch.getCount()/(double)sch.getPageSize()));
		sch.setPageCount((int)(Math.ceil(sch.getCount()/(double)sch.getPageSize())));
		//  4. 현재 클릭한 페이지 초기값.
		if(sch.getCurPage()==0) {
			
			sch.setCurPage(1);
		}
		
		/*
		현재 페이지 번호, 1
		페이지당 보일 데이터 건수 5
		화면에 나타날 데이터  1~5
		1	5	1 2 3 4 5    시작번호 1, 마지막번호 5
		2   5   6 7 8 9 10   시작번호 6, 마지막번호 10
		3   5   1112131415   시작번호 11, 마지막번호 15
		마지막번호 ? 클릭한 페이지번호 * 페이지당 보일 데이터 건수 
		시작번호 ? (클릭한 페이지번호 -1)*페이지당 보일 데이터 건수+1
		 			(1-1)*5 +1  :1
		 			(2-1)*5 +1  :6
		 			(3-1)*5 +1  :11
		 * */
		sch.setStart((sch.getCurPage()-1)*sch.getPageSize()+1);
		sch.setEnd(sch.getCurPage()*sch.getPageSize());
		System.out.println("시작번호:"+sch.getStart());
		System.out.println("마지막번호:"+sch.getEnd());
		// block을 위한 속성값 설정.
		// 1. 초기 block size(한번에 보일 block의 크기) 설정.
		sch.setBlockSize(5);
		/* 
		1 2 3 4 5  ==> blocknum 1
		6 7 8 9 10 ==> blocknum 2
		111213     ==> blocknum 3
		   2. blocknum는  현재 페이지번호/블럭의 크기를 올림 처리.
		   
		   1/5, 2/5, 3/5, 4/5 5/5 ==> 1 
		   6/5  7/5  8/5  9/5 10/5 ==> 2
		 * */
		int blocknum = (int)Math.ceil(sch.getCurPage()/(double)sch.getBlockSize());
/*		   3. blocksize가 5를 기준으로 
		1 2 3 4 5  ==> blocknum 1
		6 7 8 9 10 ==> blocknum 2
		111213     ==> blocknum 3 일때,
		시작페이지번호와 마지막페이지번호   
			1) 블럭의 마지막번호는  블럭의크기 * blocknum
				단, 마지막페이지번호보다 클 수 없다.
				마지막블럭번호는 페이지 크기보다 클때는
				페이지 크기를 마지막 블럭 번호로 설정한다.
				==> 3항 연산자로 간단하게 처리..
 * */
		int endBlock = blocknum*sch.getBlockSize();
		sch.setEndBlock(endBlock>sch.getPageCount()?
						sch.getPageCount():endBlock);
		// 시작번호는 현재블럭의 번호 ( blocknum - 1)*현재블럭크기 + 1
		System.out.println("블럭번호:"+blocknum);
		sch.setStartBlock((blocknum-1)*sch.getBlockSize()+1);
		System.out.println("시작 block번호:"+sch.getStartBlock());
		System.out.println("마지막 block번호:"+sch.getEndBlock());
		
		
		
		
		return dao.list(sch);
	}
	

	//댓글 페이징
	public ArrayList<Reply> replylist(Reply sch){
		// 1. 데이터 총건수
		sch.setCount(dao.totreCnt(sch));
		// 2. 화면에 한번에 보여줄 데이터 건수 초기값 5
		//	  다음 부터는  선택된 페이지 데이터 건수에 의해서 처리..0
		if(sch.getPageSize()==0) {
			sch.setPageSize(5);
			
		}
		
		// 3. 총페이지 수 : 총건수/한번에보여줄데이터
		//                  17/5  ==> 4
		//                  20/5  ==> 4
		//                  21/5  ==> 5
		// 총건수/페이지크기를실수로처리 나머지가 있게 한 후,
		// 올림 처리..
		//int totPage = (int)(Math.ceil(sch.getCount()/(double)sch.getPageSize()));
		sch.setPageCount((int)(Math.ceil(sch.getCount()/(double)sch.getPageSize())));
		//  4. 현재 클릭한 페이지 초기값.
		if(sch.getCurPage()==0) {
			
			sch.setCurPage(1);
		}
		
		/*
		현재 페이지 번호, 1
		페이지당 보일 데이터 건수 5
		화면에 나타날 데이터  1~5
		1	5	1 2 3 4 5    시작번호 1, 마지막번호 5
		2   5   6 7 8 9 10   시작번호 6, 마지막번호 10
		3   5   1112131415   시작번호 11, 마지막번호 15
		마지막번호 ? 클릭한 페이지번호 * 페이지당 보일 데이터 건수 
		시작번호 ? (클릭한 페이지번호 -1)*페이지당 보일 데이터 건수+1
		 			(1-1)*5 +1  :1
		 			(2-1)*5 +1  :6
		 			(3-1)*5 +1  :11
		 * */
		sch.setStart((sch.getCurPage()-1)*sch.getPageSize()+1);
		sch.setEnd(sch.getCurPage()*sch.getPageSize());
		System.out.println("시작번호:"+sch.getStart());
		System.out.println("마지막번호:"+sch.getEnd());
		// block을 위한 속성값 설정.
		// 1. 초기 block size(한번에 보일 block의 크기) 설정.
		sch.setBlockSize(5);
		/* 
		1 2 3 4 5  ==> blocknum 1
		6 7 8 9 10 ==> blocknum 2
		111213     ==> blocknum 3
		   2. blocknum는  현재 페이지번호/블럭의 크기를 올림 처리.
		   
		   1/5, 2/5, 3/5, 4/5 5/5 ==> 1 
		   6/5  7/5  8/5  9/5 10/5 ==> 2
		 * */
		int blocknum = (int)Math.ceil(sch.getCurPage()/(double)sch.getBlockSize());
/*		   3. blocksize가 5를 기준으로 
		1 2 3 4 5  ==> blocknum 1
		6 7 8 9 10 ==> blocknum 2
		111213     ==> blocknum 3 일때,
		시작페이지번호와 마지막페이지번호   
			1) 블럭의 마지막번호는  블럭의크기 * blocknum
				단, 마지막페이지번호보다 클 수 없다.
				마지막블럭번호는 페이지 크기보다 클때는
				페이지 크기를 마지막 블럭 번호로 설정한다.
				==> 3항 연산자로 간단하게 처리..
 * */
		int endBlock = blocknum*sch.getBlockSize();
		sch.setEndBlock(endBlock>sch.getPageCount()?
						sch.getPageCount():endBlock);
		// 시작번호는 현재블럭의 번호 ( blocknum - 1)*현재블럭크기 + 1
		System.out.println("블럭번호:"+blocknum);
	
		
		sch.setStartBlock((blocknum-1)*sch.getBlockSize()+1);
		System.out.println("시작 block번호:"+sch.getStartBlock());
		System.out.println("마지막 block번호:"+sch.getEndBlock());
		
		
		
		
		return dao.replylist(sch);
	}
	
	// 파일 관련
	public void insert(Board ins) {
		/*
		# 등록시 처리할 부분.
		1. 물리적 파일을 생성과 특정 위치로 변경.
		2. 등록 파일 정보 DB 처리.
		3. 실제 등록 처리..
		 * */ 
			if(ins.getNoticetype().equals("")) {
				ins.getNoticetype().equals("N");
				
			}
			dao.insert(ins);
			// 파일 업로드 내용..
			for(MultipartFile report:ins.getReport()) {
				upload(report);
			}	
		}
	
	// 댓글등록
	public void insreply(Reply r) {
		dao.insreply(r);
		
	}
	// 글삭제
	public void delete(int pjboardno) {
		dao.delete(pjboardno);
		
	}
	@Value("${upload}")
	private String upload; // 업로드할 위치..
	@Value("${tmpUpload}")
	private String tmpUpload;// 임시업로드 위치.
	private void upload(MultipartFile mtf) {
		
		String fileName=mtf.getOriginalFilename();
		
		if(fileName!=null&&!fileName.equals("")) {
			File tmpFile = new File(tmpUpload+fileName);
			// 해당 폴드에 동일한 파일이 있으면 삭제 처리
			if(tmpFile.exists()) tmpFile.delete();
			try {
			// Stream으로 온 MultipartFile을 실제 파일로 변경처리.	
				mtf.transferTo(tmpFile);
				File orgFile = new File(upload+fileName);
		
			// tmp위치에 있는 파일을 현재 웹서버에 특정할 폴드로 이동.
			// StandardCopyOption.REPLACE_EXISTING : 기존 동일 파일명이 있을 때,
			// 마지막에 올린 파일로 변경 처리..
				Files.copy(tmpFile.toPath(), orgFile.toPath(), 
							StandardCopyOption.REPLACE_EXISTING);
				
				
			} catch (IllegalStateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			dao.insertRepo(fileName);
			
		}
	}
	// 파일 수정, 파일 정보 수정..
	private void upload2(Board upt) {
		// getReport() : 수정 파일 정보
		// getFnames() : 기존 파일 정보 (배열)
		MultipartFile[] files = upt.getReport();
		for(int idx=0;idx<files.length;idx++) {
			String fileName=files[idx].getOriginalFilename();
			if(fileName!=null&&!fileName.equals("")) {
				File tmpFile = new File(tmpUpload+fileName);
				// 해당 폴드에 동일한 파일이 있으면 삭제 처리
				if(tmpFile.exists()) tmpFile.delete();
				try {
				// Stream으로 온 MultipartFile을 실제 파일로 변경처리.	
					files[idx].transferTo(tmpFile);
					File orgFile = new File(upload+fileName);
			
				// tmp위치에 있는 파일을 현재 웹서버에 특정할 폴드로 이동.
				// StandardCopyOption.REPLACE_EXISTING : 기존 동일 파일명이 있을 때,
				// 마지막에 올린 파일로 변경 처리..
					Files.copy(tmpFile.toPath(), orgFile.toPath(), 
								StandardCopyOption.REPLACE_EXISTING);
					
					
				} catch (IllegalStateException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
//				System.out.println("org:"+upt.getFnames()[idx]);
//				System.out.println("tar:"+fileName);
//				System.out.println("no:"+upt.getNo());
				/*
				# 파일 수정에 대한 DB 처리
				1. 게시물 고유번호 no, 기존 파일, 변경할 파일 정보
				2. HashMap no : 게시물 글번호
						   tar : 변경할 파일명
						   org : 기존파일명
				3. 기존 파일을 대체하는 경우 : update
				      기존에 없는 파일을 추가 처리 : insert
				
				*/
				
				
				// org, tar, no
				String fnm = upt.getFnames()[idx];
				HashMap<String, String> hm = new HashMap<String, String>();
				hm.put("org", fnm);
				hm.put("tar", fileName);
				hm.put("no", ""+upt.getPjboardno());				
				if( fnm!=null && !fnm.equals("")) {
					System.out.println(1);
					dao.uptFileInfo(hm);
					
				}else {
					System.out.println(2);
					dao.insFileInfo(hm);
					System.out.println(3);
				} 
				
			}			
			
		}
	}		
		
	public void uptpjboard(Board upt) {
		dao.uptpjboard(upt);
		upload2(upt);
	
	}
	public void delpjreply(int pjreplyno) {
		
		dao.delpjreply(pjreplyno);
	}
	public void uptreply(Reply r) {
		dao.uptreply(r);
		
	}
}


